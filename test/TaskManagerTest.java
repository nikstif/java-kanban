import manager.Managers;
import manager.TaskManager;
import model.Epic;
import model.Status;
import model.Subtask;
import model.Task;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

public class TaskManagerTest {
    private TaskManager manager;

    @BeforeEach
    void setup() {
        manager = Managers.getDefault();
    }

    @Test
    void tasksWithSameIdShouldBeEqual() {
        Task task1 = new Task("task1", "desc1", Status.NEW);
        int id = manager.createTask(task1);

        Task taskFromManager = manager.getTaskById(id);
        Task task2 = new Task(id, "task1", "desc1", Status.NEW);

        assertEquals(taskFromManager, task2, "Задачи с одинаковыми id должны быть равны");
    }

    @Test
    void subtaskShouldNotBeItsOwnEpic() {
        Epic epic = new Epic("epic1", "desc1");
        int epicId = manager.createEpic(epic);

        Subtask subtask = new Subtask("subtask1", "desc1", Status.NEW, epicId);
        int subtaskId = manager.createSubtask(subtask);

        Subtask savedSubtask = (Subtask) manager.getSubtaskById(subtaskId);
        assertNotEquals(savedSubtask.getId(), savedSubtask.getEpicId(), "Подзадача не может быть своим же эпиком");
    }

    @Test
    void epicShouldNotAddItselfAsSubtask() {
        Epic epic = new Epic("epic1", "desc1");
        int epicId = manager.createEpic(epic);

        Epic savedEpic = (Epic) manager.getEpicById(epicId);
        savedEpic.addSubtaskToEpic(epicId);

        assertFalse(savedEpic.getSubtasksByEpic().contains(epicId), "Эпик не должен содержать себя как подзадачу");
    }

    @Test
    void shouldCreateAndFindTaskEpicSubtask() {
        int taskId = manager.createTask(new Task("task1", "desc1", Status.NEW));
        int epicId = manager.createEpic(new Epic("epic1", "desc1"));
        int subtaskId = manager.createSubtask(new Subtask("subtask1", "desc1", Status.NEW, epicId));

        assertNotNull(manager.getTaskById(taskId), "Задача не найдена");
        assertNotNull(manager.getEpicById(epicId), "Эпик не найден");
        assertNotNull(manager.getSubtaskById(subtaskId), "Подзадача не найдена");
    }

    @Test
    void manualAndAutoGeneratedIdsShouldNotConflict() {
        Task manualTask = new Task("Manual Task", "Desc", Status.NEW);
        manualTask.setId(99);
        manager.createTask(manualTask);

        int autoId = manager.createTask(new Task("Auto Task", "Auto Desc", Status.NEW));

        assertNotEquals(99, autoId, "Авто id не должен конфликтовать с ручным id");
    }

    @Test
    void taskShouldRemainUnchangedAfterAddingToManager() {
        Task task = new Task("Immutable Task", "Immutable Desc", Status.NEW);
        int id = manager.createTask(task);

        Task savedTask = manager.getTaskById(id);
        assertEquals("Immutable Task", savedTask.getName());
        assertEquals("Immutable Desc", savedTask.getDescription());
        assertEquals(Status.NEW, savedTask.getStatus());
    }

    @Test
    void shouldReturnAllSubtasksForEpic() {
        int epicId = manager.createEpic(new Epic("epic1", "desc"));
        manager.createSubtask(new Subtask("subtask1", "desc", Status.NEW, epicId));
        manager.createSubtask(new Subtask("subtask2", "desc", Status.NEW, epicId));

        List<Task> subtasks = manager.getAllSubtasksByEpic(epicId);
        assertEquals(2, subtasks.size(), "Должно быть 2 подзадачи у эпика");
    }
}
